#!/usr/bin/env bash
#
# tmuxa: Interactive tmux session selector and attacher.
#
# Lists active tmux sessions, lets you choose one (sk → fzf → select → manual),
# then runs:
#     tmux attach <flags> -t <selected-session>
#
# Usage examples:
#   tmuxa            # equivalent to: tmux attach -t <session>
#   tmuxa -t         # same as above
#   tmuxa -dt        # tmux attach -dt <session>
#   tmuxa -h|--help  # show this help
#
# Any flags supplied are forwarded to `tmux attach`.  If they do not already
# include “-t/--target”, the flag “-t” is added automatically.
set -euo pipefail
IFS=$'\n\t'

print_help() {
    # Print usage block above (lines 4-18)
    sed -n '4,18p' "$0"
}

# Select a tmux session and output its name
select_session() {
    local sessions=() session_name
    mapfile -t sessions < <(tmux ls 2>/dev/null | awk -F: '{print $1}')

    if (( ${#sessions[@]} == 0 )); then
        echo "No tmux sessions found." >&2
        exit 1
    fi

    if command -v sk >/dev/null 2>&1; then
        session_name="$(printf '%s\n' "${sessions[@]}" | sk --prompt='tmux session> ')"
    elif command -v fzf >/dev/null 2>&1; then
        session_name="$(printf '%s\n' "${sessions[@]}" | fzf --prompt='tmux session> ')"
    else
        echo "Select a session:"
        select session_name in "${sessions[@]}"; do
            [[ -n $session_name ]] && break
            echo "Invalid selection."
        done
    fi

    if [[ -z $session_name ]]; then
        echo "No session selected." >&2
        exit 3
    fi
    printf '%s\n' "$session_name"
}

# Detect tmux servers and allow selecting both server and session when multiple
# servers are running.  Returns a string “server:session”.
select_server_and_session() {
    local servers=("$@")
    local tmux_dir="/tmp/tmux-${UID}"
    local items=()

    # Build a list “server:session” for each server.
    for server in "${servers[@]}"; do
        local _sessions=()
        local _sessions=()
        if mapfile -t _sessions < <(tmux -S "${tmux_dir}/${server}" ls 2>/dev/null | awk -F: '{print $1}'); then
            for session in "${_sessions[@]}"; do
                items+=("${server}:${session}")
            done
        fi
    done

    if (( ${#items[@]} == 0 )); then
        echo "No tmux sessions found." >&2
        exit 1
    fi

    local choice=""
    if command -v sk >/dev/null 2>&1; then
        choice="$(printf '%s\n' "${items[@]}" | sk --prompt='tmux server:session> ')"
    elif command -v fzf >/dev/null 2>&1; then
        choice="$(printf '%s\n' "${items[@]}" | fzf --prompt='tmux server:session> ')"
    else
        echo "Select a server and session:"
        select choice in "${items[@]}"; do
            [[ -n $choice ]] && break
            echo "Invalid selection."
        done
    fi

    if [[ -z $choice ]]; then
        echo "No selection made." >&2
        exit 3
    fi

    printf '%s\n' "$choice"
}

main() {
    local attach_flags=("$@")

    # Help handling
    if [[ ${#attach_flags[@]} -gt 0 ]]; then
        case ${attach_flags[0]} in
            -h|--help|help)
                print_help
                exit 0
            ;;
        esac
    fi

    # Default to "-t" when no flags given
    if [[ ${#attach_flags[@]} -eq 0 ]]; then
        attach_flags=("-t")
    fi

    # Determine whether a target-session flag is already present.
    local has_target_flag=false
    local has_inline_target=false
    for arg in "${attach_flags[@]}"; do
        case "$arg" in
            -t|--target) has_target_flag=true ;;
            --target=*)  has_target_flag=true; has_inline_target=true ;;
            -*t*)        has_target_flag=true ;;   # handles combined flags like “-dt”
        esac
    done

    # Detect running tmux servers (socket files inside /tmp/tmux-$UID).
    local tmux_dir="/tmp/tmux-${UID}"
    local server_socket=""
    local session_name=""
    local _servers=()

    if [[ -d $tmux_dir ]]; then
        mapfile -t _servers < <(find "$tmux_dir" -maxdepth 1 -type s -printf "%f\n" 2>/dev/null)
    fi

    if (( ${#_servers[@]} <= 1 )); then
        session_name="$(select_session)"
    else
        local selection
        selection="$(select_server_and_session "${_servers[@]}")"
        server_socket="${selection%%:*}"
        session_name="${selection#*:}"
    fi

    echo "Attaching to session: ${server_socket:+${server_socket}:}$session_name"

    # Build and execute the final command, adding -S when needed.
    if $has_target_flag; then
        if [[ -n $server_socket ]]; then
            exec tmux -S "${tmux_dir}/${server_socket}" attach "${attach_flags[@]}" "$session_name"
        else
            exec tmux attach "${attach_flags[@]}" "$session_name"
        fi
    else
        if [[ -n $server_socket ]]; then
            exec tmux -S "${tmux_dir}/${server_socket}" attach "${attach_flags[@]}" -t "$session_name"
        else
            exec tmux attach "${attach_flags[@]}" -t "$session_name"
        fi
    fi
}

main "$@"
