#!/usr/bin/env bash
#
# tmuxa: Interactive tmux session selector and attacher.
#
# Lists active tmux sessions, lets you choose one (sk → fzf → select → manual),
# then runs:
#     tmux attach <flags> -t <selected-session>
#
# Usage examples:
#   tmuxa            # equivalent to: tmux attach -t <session>
#   tmuxa -t         # same as above
#   tmuxa -dt        # tmux attach -dt <session>
#   tmuxa -h|--help  # show this help
#
# Any flags supplied are forwarded to `tmux attach`.  If they do not already
# include “-t/--target”, the flag “-t” is added automatically.
set -euo pipefail
IFS=$'\n\t'

print_help() {
    # Print usage block above (lines 4-18)
    sed -n '4,18p' "$0"
}

# Select a tmux session and output its name
select_session() {
    local sessions=() session_name
    mapfile -t sessions < <(tmux ls 2>/dev/null | awk -F: '{print $1}')

    if (( ${#sessions[@]} == 0 )); then
        echo "No tmux sessions found." >&2
        exit 1
    fi

    if command -v sk >/dev/null 2>&1; then
        session_name="$(printf '%s\n' "${sessions[@]}" | sk --prompt='tmux session> ')"
    elif command -v fzf >/dev/null 2>&1; then
        session_name="$(printf '%s\n' "${sessions[@]}" | fzf --prompt='tmux session> ')"
    else
        echo "Select a session:"
        select session_name in "${sessions[@]}"; do
            [[ -n $session_name ]] && break
            echo "Invalid selection."
        done
    fi

    if [[ -z $session_name ]]; then
        echo "No session selected." >&2
        exit 3
    fi
    printf '%s\n' "$session_name"
}

main() {
    local attach_flags=("$@")

    # Help handling
    if [[ ${#attach_flags[@]} -gt 0 ]]; then
        case ${attach_flags[0]} in
            -h|--help|help)
                print_help
                exit 0
            ;;
        esac
    fi

    # Default to "-t" when no flags given
    if [[ ${#attach_flags[@]} -eq 0 ]]; then
        attach_flags=("-t")
    fi

    # Determine whether a target-session flag is already present.
    local has_target_flag=false
    local has_inline_target=false
    for arg in "${attach_flags[@]}"; do
        case "$arg" in
            -t|--target) has_target_flag=true ;;
            --target=*)  has_target_flag=true; has_inline_target=true ;;
            -*t*)        has_target_flag=true ;;   # handles combined flags like “-dt”
        esac
    done

    # Select a session interactively.
    local session_name
    session_name="$(select_session)"

    echo "Attaching to session: $session_name"

    # Build and execute the final command.
    if $has_target_flag; then
        # If the target flag needs a value (e.g. “-t”, “-dt”), append the session
        # name.  If the value was supplied inline (e.g. “--target=name”), the extra
        # positional argument is harmlessly ignored.
        exec tmux attach "${attach_flags[@]}" "$session_name"
    else
        exec tmux attach "${attach_flags[@]}" -t "$session_name"
    fi
}

main "$@"
