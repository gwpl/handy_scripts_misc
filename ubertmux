#!/usr/bin/env bash
#
# ubertmux
#
# ubertmux is tmux to access nested tmux clients,
# running on default tmux server with default tmux config
# having ubertmux config and server isolated.
#
# ubertmux command prefix is Ctrl+A (!).
#
# This script ensures that you can run a tmux ‚Äúubertmux‚Äù server with its own custom config,
# completely isolated from your default tmux environment. By using a separate socket file,
# we guarantee that even if your regular tmux server is already running (or you start it later),
# ubertmux will use its own settings (e.g. Ctrl+A prefix) and never get ‚Äú-f ignored‚Äù errors.
#
# Usage:
#   1. Place this script somewhere in your PATH, e.g. ~/bin/ubertmux
#   2. Make it executable: chmod +x ~/bin/ubertmux
#   3. Run ‚Äúubertmux‚Äù to start or attach to your custom tmux server.
#
# What we‚Äôre doing:
#   1. Verify that tmux is installed.
#   2. Define variables for the custom config (~/.ubertmux.conf) and a dedicated socket (/tmp/ubertmux.sock).
#   3. If the config doesn‚Äôt exist, create a minimal one that rebinds prefix to Ctrl+A.
#   4. Check if a tmux server is already listening on our ubertmux socket:
#        ‚Ä¢ If the socket file exists but no server is responding, remove the stale socket file.
#   5. Launch tmux with ‚Äú-f $UBERCONF -S $UBERSOCK new-session -A -s ubertmux‚Äù:
#        ‚Ä¢ ‚Äú-f‚Äù ensures that this new server will load our custom config.
#        ‚Ä¢ ‚Äú-S‚Äù points tmux to use a separate socket file, guaranteeing isolation from the default server.
#        ‚Ä¢ ‚Äúnew-session -A -s ubertmux‚Äù creates or attaches to a session named ‚Äúubertmux‚Äù on that socket.
#
# By the end, you‚Äôll have:
#   ‚Ä¢ An ‚Äúouter‚Äù tmux server (ubertmux) listening on a dedicated socket, using prefix Ctrl+A.
#   ‚Ä¢ Within its panes, you can start your normal tmux clients (prefix Ctrl+B), with zero conflicts.
#

set -euo pipefail

#--------------------------------------------------
# Helper logging functions
#--------------------------------------------------
INFO()  { echo "INFO: $*"; }
ERROR() { echo "ERROR: $*" >&2; }

echo "üöÄ Starting ubertmux setup..."

############################################
# 1. Ensure tmux is installed and runnable  #
############################################

if ! command -v tmux &>/dev/null; then
    echo "‚ùå Error: tmux is not installed or not in PATH." >&2
    echo "   Please install tmux first (e.g., apt install tmux, brew install tmux, etc.)." >&2
    exit 1
fi

echo "‚úî tmux found."

############################################
# 2. Define config file and socket paths  #
############################################

# Path to the custom ubertmux config
UBERCONF="$HOME/.ubertmux.conf"

# Path to a dedicated socket for the ubertmux server.
# Use a per-user directory, following tmux's default pattern for multiuser safety.
# On most systems, tmux uses /tmp/tmux-$(id -u)/default as the default socket.
# We'll use /tmp/tmux-$(id -u)/ubertmux.sock for ubertmux.
# If your system uses /run/user/$(id -u)/tmux/default, substitute accordingly.
UBERSOCK="/tmp/tmux-$(id -u)/ubertmux.sock"
INFO "Using dedicated socket: $UBERSOCK"

#--------------------------------------------------
# Optional workspace support
#--------------------------------------------------
# If the environment variable UBERTMUX_WORKSPACE is set, we validate that it
# points to an existing directory.  Later we will:
#   ‚Ä¢ Append a ‚Äúnew-window -c <workspace>‚Äù binding to the config (if missing)
#   ‚Ä¢ Change to that directory before launching tmux
WORKSPACE="${UBERTMUX_WORKSPACE:-}"
if [[ -n "$WORKSPACE" ]]; then
    if [[ ! -d "$WORKSPACE" ]]; then
        ERROR "UBERTMUX_WORKSPACE is set to '$WORKSPACE' but that directory does not exist."
        exit 1
    fi
    INFO "UBERTMUX_WORKSPACE detected: $WORKSPACE"
fi

echo "‚Ñπ Ubertmux config will be: $UBERCONF"
echo "‚Ñπ Ubertmux socket will be: $UBERSOCK"
echo
echo "Note: On some systems, the default tmux socket is at /run/user/\$(id -u)/tmux/default."
echo "      If you want ubertmux to use that location, edit this script and set:"
echo "      UBERSOCK=\"/run/user/\$(id -u)/tmux/ubertmux.sock\""
echo

###########################################################
# 3. Create ~/.ubertmux.conf if it doesn‚Äôt already exist  #
###########################################################

if [[ ! -f "$UBERCONF" ]]; then
    echo "‚úç $UBERCONF not found. Creating a minimal ubertmux config..."

    cat > "$UBERCONF" <<'EOF'
# ~/.ubertmux.conf
#
# Minimal tmux config for ubertmux:
#   ‚Ä¢ Change prefix to Ctrl+A
#   ‚Ä¢ Unbind old prefix Ctrl+B
#   ‚Ä¢ Make sure ‚Äúsend-prefix‚Äù is available so nested tmux can receive Ctrl+A if needed.

set -g prefix C-a
unbind C-b
bind C-a send-prefix

# (You may add more ubertmux-only bindings here if desired,
#  such as status-line color changes, pane-navigation shortcuts, etc.)
EOF

    echo "‚úî Created $UBERCONF."
else
    echo "‚úî Found existing ubertmux config at $UBERCONF. Leaving it intact."
fi

#--------------------------------------------------
# 3b. If a workspace is requested, ensure the config
#     has a binding to open new windows inside it.
#--------------------------------------------------
if [[ -n "$WORKSPACE" ]]; then
    # Avoid duplicating the bind line if the user already has one.
    if ! grep -qE "bind[[:space:]]+c[[:space:]]+new-window[[:space:]]+-c[[:space:]]+'?$WORKSPACE'?" "$UBERCONF"; then
        INFO "Adding workspace-specific new-window binding to $UBERCONF"
        printf "\n# Start new windows in CWD=%s\nbind c new-window -c '%s'\n" "$WORKSPACE" "$WORKSPACE" >> "$UBERCONF"
    fi
fi

##############################################################
# 4. Handle stale socket if present but no tmux server alive #
##############################################################

if [[ -S "$UBERSOCK" ]]; then
    echo "‚Ñπ Found existing socket file at $UBERSOCK. Checking for a running ubertmux server..."

    # Attempt to list sessions on that socket. If it fails with ‚Äúconnection refused‚Äù or ‚Äúno server running‚Äù,
    # we treat it as a stale socket and remove the file so tmux can recreate it cleanly.
    if ! tmux -S "$UBERSOCK" ls &>/dev/null; then
        echo "‚ö† No tmux server responding on $UBERSOCK. Cleaning up stale socket file..."
        rm -f "$UBERSOCK"
        echo "‚úî Removed stale socket."
    else
        echo "‚úî A tmux server is already running on $UBERSOCK."
    fi
else
    echo "‚Ñπ No existing ubertmux socket detected. Will create a new server shortly."
fi

####################################################
# 5. Launch (or attach) the ubertmux tmux session  #
####################################################

echo "üîß Starting or attaching to the ubertmux tmux server..."
echo "   Note: We use '-f $UBERCONF -S $UBERSOCK' to ensure a brand-new server (or attach to the right one)."
echo "   This guarantees that your default tmux (on its own socket) will never load ~/.ubertmux.conf."
echo

# -f  : point to our ubertmux-specific config
# -S  : use the dedicated socket (so it doesn't collide with default tmux)
# new-session -A -s ubertmux:
#        * -s ubertmux names the session ‚Äúubertmux‚Äù
#        * -A        tells tmux: ‚ÄúIf session exists, attach. Otherwise, create it.‚Äù

# If a workspace has been requested, switch to it so the initial pane starts there.
if [[ -n "$WORKSPACE" ]]; then
    INFO "Changing directory to workspace: $WORKSPACE"
    cd "$WORKSPACE"
fi

tmux -f "$UBERCONF" -S "$UBERSOCK" new-session -A -s ubertmux

# If tmux exits unexpectedly, the script will end here.
#
# After this, you are inside the ubertmux environment.  
# Use Ctrl+A as your prefix.  
# To split panes: Ctrl+A + " (horizontal) or Ctrl+A + % (vertical).  
# Within each pane, you can run your default tmux (prefix Ctrl+B), attach to existing sessions, etc.
#
# If you exit or detach (Ctrl+A + d), you can resume later by running this same ‚Äúubertmux‚Äù script again.
#
# Enjoy your multi-layered tmux setup‚Äîouter (ubertmux) with Ctrl+A, inner (default) with Ctrl+B,
# with zero risk of ‚Äú-f <config> ignored‚Äù errors or keybinding collisions.
#
