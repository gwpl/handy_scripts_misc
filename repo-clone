#!/bin/bash
# **Repo Clone Tool**
#
# *Usage*: `./repo-clone <url>`
#
# This script can be *sourced* or *executed* directly.
#
# Examples:
#   repo-clone git@server:username/reponame
#   repo-clone https://server/username/reponame.git
#   repo-clone https://server/username/reponame
#   repo-clone https://huggingface.co/TheBloke/wizard-mega-13B-GPTQ
#
# When sourced, call the function:
#   repo_clone <url>

# Function to check if the url is from huggingface.co
is_it_huggingface() {
    local url="$1"
    [[ "$url" == "https://huggingface.co/"* ]]
}

# Function to clone the huggingface repository
clone_huggingface() {
    local url="$1"
    # Remove leading https://huggingface.co/
    url="${url#https://huggingface.co/}"
    IFS='/' read -r -a array <<< "$url"
    local username="${array[0]}"
    local repo="${array[1]%.git}"

    set -x
    mkdir -p "$HOME/huggingface.co/${username}" && cd "$HOME/huggingface.co/${username}" && git lfs install && \
        git clone "https://huggingface.co/${username}/${repo}"
}

# Function to parse the git url and return hosting shortcode, git hosting, username, and repository name
parse_git_url() {
    local url="$1"
    local is_ssh=false
    local git_hosting
    local hosting_shortcode
    local username
    local repo

    # Check if the URL has the SSH format
    if [[ "$url" =~ "@" ]]; then
        is_ssh=true
        IFS=':' read -r -a array <<< "$url"
        git_hosting="${array[0]#*@}"
        IFS='/' read -r -a array <<< "${array[1]}"
    else
        url="${url#http://}"
        url="${url#https://}"
        IFS='/' read -r -a array <<< "$url"
        git_hosting="${array[0]}"
        array=("${array[@]:1}")
    fi

    hosting_shortcode="${git_hosting%%.*}"
    username="${array[0]}"
    repo="${array[1]%.git}"

    echo "$hosting_shortcode" "$git_hosting" "$username" "$repo" "$is_ssh"
}

# Function to create/update the directory and clone or pull the repository
clone_repo() {
    local hosting_shortcode="$1"
    local username="$2"
    local repo="$3"
    local clone_url="$4"

    set -x
    local repo_path="$HOME/$hosting_shortcode/$username/$repo"

    if [ -d "$repo_path" ]; then
        # If repository already exists, let's fetch and optionally pull
        cd "$repo_path"
        git fetch
        local changes
        changes="$(git status --porcelain)"
        if [ -z "$changes" ]; then
            git pull
        else
            echo "Local changes found. Please commit or stash them before pulling."
        fi
    else
        mkdir -p "$HOME/$hosting_shortcode/$username"
        cd "$HOME/$hosting_shortcode/$username"
        git clone "$clone_url"
    fi
}

# The core function that can be called when the script is sourced
repo_clone() {
    # Check if the url is from huggingface.co
    if is_it_huggingface "$1"; then
        clone_huggingface "$1"
        return
    fi

    # Otherwise, parse the git url
    read -r hosting_shortcode git_hosting username repo is_ssh <<< "$(parse_git_url "$1")"

    # Create the clone url
    local clone_url
    if [[ "$is_ssh" = "true" ]]; then
        clone_url="git@$git_hosting:$username/$repo.git"
    else
        clone_url="https://$git_hosting/$username/$repo.git"
    fi

    # Clone the repository
    clone_repo "$hosting_shortcode" "$username" "$repo" "$clone_url"
}

# Main entry point (only invokes the function if executed directly)
main() {
    if [[ -z "$1" ]]; then
        echo "Usage: repo-clone <url>"
        return 1
    fi
    repo_clone "$@"
}

# Check if the script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
