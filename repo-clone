#!/bin/bash

# Thanks to LLM handy script automating keeping clones or repositories
# organised:
# $HOME/$server_shortcode/$username/$repo
#
# Usage:
# repo-clone git@server:username/reponame  # for ssh
# repo-clone https://server/username/reponame.git  # for https
# repo-clone https://server/username/reponame # for project url
# Works with gitlab, github or custom gitlab servers.


# Function to parse the git url and return hosting shortcode, git hosting, username, and repository name
parse_git_url() {
    url="$1"
    is_ssh=false

    # Check if the URL has the SSH format
    if [[ "$url" =~ "@" ]]; then
        is_ssh=true
        IFS=':' read -r -a array <<< "$url"
        git_hosting="${array[0]#*@}"
        IFS='/' read -r -a array <<< "${array[1]}"
    else
        url="${url#http://}"
        url="${url#https://}"
        IFS='/' read -r -a array <<< "$url"
        git_hosting="${array[0]}"
        array=("${array[@]:1}")
    fi

    hosting_shortcode="${git_hosting%%.*}"
    username="${array[0]}"
    repo="${array[1]%.git}"

    echo "$hosting_shortcode" "$git_hosting" "$username" "$repo" "$is_ssh"
}

# Function to create the directory and clone the repository
clone_repo() {
    hosting_shortcode="$1"
    username="$2"
    repo="$3"
    clone_url="$4"

    set -x
    mkdir -p "$HOME/$hosting_shortcode/$username"
    cd "$HOME/$hosting_shortcode/$username"
    git clone "$clone_url"
}

# Parse the git url
read -r hosting_shortcode git_hosting username repo is_ssh <<< "$(parse_git_url "$1")"

# Create the clone url
if [[ "$is_ssh" = "true" ]]; then
    clone_url="git@$git_hosting:$username/$repo.git"
else
    clone_url="https://$git_hosting/$username/$repo.git"
fi

# Clone the repository
clone_repo "$hosting_shortcode" "$username" "$repo" "$clone_url"

