#!/usr/bin/env bash
# update-submodules
# 
# Convenience script for contributors to update all submodules to their latest HEAD
# and commit the gitlink updates to the superrepo.
#
# Usage:
#   ./update-submodules [--dry-run] [--help]
#
# This script:
# 1. Updates all submodules to their latest remote HEAD
# 2. Shows which submodules were updated
# 3. Commits the gitlink changes with a descriptive message
# 4. Provides guidance on next steps

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Parse arguments
DRY_RUN=false
HELP=false

for arg in "$@"; do
    case $arg in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --help|-h)
            HELP=true
            shift
            ;;
        *)
            echo "Unknown argument: $arg"
            HELP=true
            ;;
    esac
done

if [[ "$HELP" == true ]]; then
    echo "Usage: $0 [--dry-run] [--help]"
    echo ""
    echo "Update all submodules to their latest HEAD and commit gitlink changes."
    echo ""
    echo "Options:"
    echo "  --dry-run    Show what would be done without making changes"
    echo "  --help, -h   Show this help message"
    echo ""
    echo "This script helps contributors keep submodules up to date by:"
    echo "  1. Updating all submodules to their remote HEAD"
    echo "  2. Committing the gitlink updates"
    echo "  3. Providing clear status and next steps"
    exit 0
fi

echo -e "${BLUE}🔄 Submodule Update Tool${NC}"
echo "=============================="

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}❌ Error: Not in a git repository${NC}"
    exit 1
fi

# Check if there are any submodules
if ! git submodule status > /dev/null 2>&1 || [ -z "$(git submodule status)" ]; then
    echo -e "${YELLOW}⚠️  No submodules found in this repository${NC}"
    exit 0
fi

echo -e "${BLUE}📋 Current submodule status:${NC}"
git submodule status

echo ""
echo -e "${BLUE}🔍 Checking for updates...${NC}"

# Store initial submodule SHAs
declare -A initial_shas
while IFS= read -r line; do
    # Parse submodule status: " SHA path (tag/branch)" or "-SHA path" or "+SHA path"
    sha=$(echo "$line" | sed 's/^[-+ ]//' | awk '{print $1}')
    path=$(echo "$line" | awk '{print $2}')
    initial_shas["$path"]="$sha"
done < <(git submodule status)

if [[ "$DRY_RUN" == true ]]; then
    echo -e "${YELLOW}🔍 DRY RUN MODE - No changes will be made${NC}"
    echo ""
fi

# Update submodules
echo -e "${BLUE}⬇️  Fetching latest changes for all submodules...${NC}"

if [[ "$DRY_RUN" == false ]]; then
    git submodule update --remote --merge
else
    echo "Would run: git submodule update --remote --merge"
fi

echo ""
echo -e "${BLUE}📊 Checking for changes...${NC}"

# Check which submodules were updated
updated_modules=()
while IFS= read -r line; do
    sha=$(echo "$line" | sed 's/^[-+ ]//' | awk '{print $1}')
    path=$(echo "$line" | awk '{print $2}')
    
    if [[ "${initial_shas[$path]}" != "$sha" ]]; then
        updated_modules+=("$path")
        echo -e "${GREEN}✅ Updated: $path${NC}"
        echo "   ${initial_shas[$path]} → $sha"
    fi
done < <(git submodule status)

if [[ ${#updated_modules[@]} -eq 0 ]]; then
    echo -e "${GREEN}✅ All submodules are already up to date${NC}"
    exit 0
fi

echo ""
echo -e "${BLUE}📝 Summary: ${#updated_modules[@]} submodule(s) updated${NC}"

# Check git status
if [[ "$DRY_RUN" == false ]]; then
    if git diff --quiet && git diff --cached --quiet; then
        echo -e "${YELLOW}⚠️  No gitlink changes detected (this is unusual)${NC}"
        exit 0
    fi
fi

# Commit the changes
commit_message="feat: update submodules to latest HEAD

Updated submodules:"
for module in "${updated_modules[@]}"; do
    commit_message+="
- $module: ${initial_shas[$module]} → $(git submodule status "$module" | sed 's/^[-+ ]//' | awk '{print $1}')"
done

commit_message+="

🤖 Generated with Claude Code

Co-Authored-By: Claude <noreply@anthropic.com>"

echo ""
echo -e "${BLUE}💾 Committing gitlink updates...${NC}"

if [[ "$DRY_RUN" == false ]]; then
    git add .
    git commit -m "$commit_message"
    echo -e "${GREEN}✅ Committed gitlink updates${NC}"
else
    echo "Would commit with message:"
    echo "$commit_message"
fi

echo ""
echo -e "${BLUE}🎉 Next steps:${NC}"
echo "1. Review the commit with: git show"
echo "2. Push changes with: git push"
echo "3. Or check the log with: git log --oneline -5"

if [[ "$DRY_RUN" == true ]]; then
    echo ""
    echo -e "${YELLOW}🔍 This was a dry run. Re-run without --dry-run to apply changes.${NC}"
fi