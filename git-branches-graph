#!/usr/bin/env python3
"""
git_branches_graph.py
---------------------

Visualise relationships between Git branches.

The script:

1. Verifies it is executed inside a Git working tree.
2. Collects branch names either automatically (`git branch --format '%(refname:short)'`)
   or from explicit user-supplied lists (CLI parameters or standard input).
   Leading markers produced by `git branch` such as “* ” or “+ ” are stripped.
3. For every pair of branches it finds their *nearest common ancestor* via
   `git merge-base`.  
   • If the ancestor **commit** is pointed-to by an existing branch, that branch
     name is used as the node label.  
   • Otherwise the commit is referred to by its shortest unique abbreviation
     (`git rev-parse --short=<n>` is attempted, falling back to 7 chars).
4. Produces a simple *directed* graph where each common-ancestor node points to
   the two (or more) branch tips that diverge from it.
5. Supports three output formats selectable with `--format`:
     • mermaid  (default)  –  “graph LR; A --> B;”
     • dot/graphviz        –  “digraph { A -> B }”
     • csv                 –  “from,to”
6. Prints to STDOUT, making it easy to pipe into `dot -Tpng`, `mmdc`, etc.

Example
-------

    # Auto-detect local branches and print Mermaid
    ./git_branches_graph.py

    # Provide explicit branch names
    ./git_branches_graph.py feature/login bugfix/email --format dot

    # Read branch names from STDIN (could be `git branch` output)
    git branch | ./git_branches_graph.py --stdin -f csv
"""
from __future__ import annotations

import argparse
import itertools
import os
import shlex
import subprocess
import sys
from pathlib import Path
from typing import Dict, Iterable, List, Set, Tuple
from collections import deque

# Repository path selected by --repo option; set in main()
GIT_REPO: Path | None = None

# --------------------------------------------------------------------------- #
# Helpers                                                                     #
# --------------------------------------------------------------------------- #


def run_git(*args: str) -> str:
    """Run a git command (optionally inside --repo path) and return stdout stripped."""
    cmd = ["git"]
    if GIT_REPO is not None:
        cmd += ["-C", str(GIT_REPO)]
    cmd += list(args)
    try:
        out = subprocess.check_output(cmd, text=True)
    except subprocess.CalledProcessError as exc:
        sys.stderr.write(f"error: {' '.join(cmd)} failed: {exc}\n")
        sys.exit(2)
    return out.strip()


def ensure_git_repo() -> None:
    """Abort if we are not inside a git repository."""
    try:
        inside = run_git("rev-parse", "--is-inside-work-tree")
    except SystemExit:
        raise
    except Exception:
        inside = "false"

    if inside != "true":
        sys.stderr.write("fatal: not a git repository (or any of the parent directories)\n")
        sys.exit(1)


def strip_branch_marker(name: str) -> str:
    """Remove markers such as '* ' or '+ ' added by `git branch` output."""
    return name.lstrip("*+ ").strip()


def abbreviate_commit(commit: str) -> str:
    """Return shortest unique abbreviation; fall back to 7 chars."""
    try:
        return run_git("rev-parse", "--short", commit)
    except Exception:
        return commit[:7]


# --------------------------------------------------------------------------- #
# Graph computation                                                           #
# --------------------------------------------------------------------------- #


def collect_branches(use_stdin: bool, explicit: List[str]) -> List[str]:
    if use_stdin:
        names = [strip_branch_marker(line) for line in sys.stdin.read().splitlines() if line.strip()]
    elif explicit:
        names = [strip_branch_marker(n) for n in explicit]
    else:
        # All local branches
        raw = run_git("branch", "--format=%(refname:short)").splitlines()
        names = [strip_branch_marker(r) for r in raw if r.strip()]
    if not names:
        sys.stderr.write("error: no branches detected / specified\n")
        sys.exit(1)
    return sorted(set(names))


def map_branches_to_commits(branches: Iterable[str]) -> Dict[str, str]:
    return {br: run_git("rev-parse", br) for br in branches}


def common_ancestor(a_commit: str, b_commit: str) -> str | None:
    """
    Return the merge-base of two commits or None if the commits have no
    common ancestor (git exits with status 1 in that case).
    """
    cmd: List[str] = ["git"]
    if GIT_REPO is not None:
        cmd += ["-C", str(GIT_REPO)]
    cmd += ["merge-base", a_commit, b_commit]
    try:
        return subprocess.check_output(cmd, text=True).strip()
    except subprocess.CalledProcessError:
        # unrelated histories
        return None


def build_graph(branch_commits: Dict[str, str]) -> Tuple[Set[Tuple[str, str]], Dict[str, str]]:
    """
    Discover all common-ancestor vertices (recursively) and build the full edge
    set. New ancestors discovered during the process are themselves compared
    with every other vertex until no new vertices appear.
    Returns:
        edges: Set[(parent_label, child_label)]
        node_labels: Map commit_sha -> chosen label
    """
    # Initial labels (branch names for tips)
    node_labels: Dict[str, str] = {sha: br for br, sha in branch_commits.items()}
    vertices: List[str] = list(branch_commits.values())  # queue-like list

    edges: Set[Tuple[str, str]] = set()
    idx = 0  # index of vertex to start pairing from
    while idx < len(vertices):
        current_subset = vertices[idx:]
        idx = len(vertices)  # next iteration will start where new vertices begin

        # Compare every unordered pair within the current subset and all previous vertices
        for sha1 in vertices:
            for sha2 in current_subset:
                if sha1 >= sha2:  # ensure each unordered pair processed once
                    continue
                anc = common_ancestor(sha1, sha2)
                if not anc:
                    continue  # unrelated histories

                # register ancestor label (once)
                if anc not in node_labels:
                    node_labels[anc] = abbreviate_commit(anc)
                    vertices.append(anc)  # newly discovered, will be processed in later rounds

                # add edges ancestor -> child (skip self-referential edges)
                if node_labels[anc] != node_labels[sha1]:
                    edges.add((node_labels[anc], node_labels[sha1]))
                if node_labels[anc] != node_labels[sha2]:
                    edges.add((node_labels[anc], node_labels[sha2]))

    return edges, node_labels


# --------------------------------------------------------------------------- #
# Transitive reduction                                                        #
# --------------------------------------------------------------------------- #


def transitive_reduction(edges: Set[Tuple[str, str]]) -> Set[Tuple[str, str]]:
    """
    Perform transitive reduction on a DAG represented by *edges*.
    Removes every edge (u, v) for which an alternative path u ~~> v exists.
    """
    # Build adjacency list
    adj: Dict[str, Set[str]] = {}
    for u, v in edges:
        adj.setdefault(u, set()).add(v)

    def reachable(src: str, dst: str, skip_edge: Tuple[str, str]) -> bool:
        """DFS reachability ignoring *skip_edge*."""
        stack = [src]
        seen = {src}
        while stack:
            u = stack.pop()
            for w in adj.get(u, ()):
                if (u, w) == skip_edge:
                    continue
                if w == dst:
                    return True
                if w not in seen:
                    seen.add(w)
                    stack.append(w)
        return False

    reduced: Set[Tuple[str, str]] = set()
    for edge in edges:
        u, v = edge
        if not reachable(u, v, edge):
            reduced.add(edge)
    return reduced


# --------------------------------------------------------------------------- #
# Output renderers                                                            #
# --------------------------------------------------------------------------- #


def render_mermaid(edges: Set[Tuple[str, str]]) -> str:
    lines = ["graph LR"]
    for parent, child in sorted(edges):
        lines.append(f"    {shlex.quote(parent)} --> {shlex.quote(child)}")
    return "\n".join(lines)


def render_png(edges: Set[Tuple[str, str]]) -> bytes:
    """Render PNG via Graphviz `dot`."""
    dot_src = render_dot(edges)
    try:
        # Pass graphviz DOT source as bytes and receive binary PNG data.
        png_data = subprocess.check_output(
            ["dot", "-Tpng"],
            input=dot_src.encode(),
        )
    except FileNotFoundError:
        sys.stderr.write("error: graphviz `dot` executable not found. Install graphviz.\n")
        sys.exit(2)
    except subprocess.CalledProcessError as exc:
        sys.stderr.write(f"error: dot failed: {exc}\n")
        sys.exit(2)
    return png_data


def render_dot(edges: Set[Tuple[str, str]]) -> str:
    lines = ["digraph G {"]
    for parent, child in sorted(edges):
        lines.append(f'    "{parent}" -> "{child}";')
    lines.append("}")
    return "\n".join(lines)


def render_csv(edges: Set[Tuple[str, str]]) -> str:
    lines = ["from,to"]
    lines += [f"{parent},{child}" for parent, child in sorted(edges)]
    return "\n".join(lines)


# --------------------------------------------------------------------------- #
# CLI                                                                         #
# --------------------------------------------------------------------------- #


def parse_args(argv: List[str] | None = None) -> argparse.Namespace:
    p = argparse.ArgumentParser(
        description="Produce a simple graph (Mermaid, Graphviz, CSV) showing common ancestors of Git branches."
    )
    p.add_argument(
        "branches",
        nargs="*",
        help="Branch names to include. If omitted all local branches are used.",
    )
    p.add_argument(
        "-s",
        "--stdin",
        action="store_true",
        help="Read branch names from standard input (one per line, accepts `git branch` raw output).",
    )
    p.add_argument(
        "-r",
        "--repo",
        default=".",
        help="Path to a git repository to inspect (default: current directory).",
    )
    p.add_argument(
        "-f",
        "--format",
        choices=("mermaid", "dot", "csv", "png"),
        default="mermaid",
        help="Output format (default: mermaid).",
    )
    p.add_argument(
        "-o",
        "--output",
        help="Write output to given file path. "
             "When --format png and this flag is omitted the script "
             "auto-creates graph.png / graph.<n>.png in the CWD.",
    )
    return p.parse_args(argv)


def main(argv: List[str] | None = None) -> None:
    args = parse_args(argv)

    # If the first positional argument looks like a directory that is a git
    # repository, treat it as the --repo path (for convenience).
    if args.repo == "." and args.branches:
        candidate_repo = Path(args.branches[0]).expanduser().resolve()
        if candidate_repo.is_dir() and (candidate_repo / ".git").exists():
            args.repo = str(candidate_repo)
            args.branches = args.branches[1:]

    global GIT_REPO
    GIT_REPO = Path(args.repo).expanduser().resolve()
    if not GIT_REPO.exists():
        sys.stderr.write(f"fatal: path '{GIT_REPO}' does not exist\n")
        sys.exit(1)

    ensure_git_repo()

    branches = collect_branches(args.stdin, args.branches)
    branch_commits = map_branches_to_commits(branches)
    edges, _ = build_graph(branch_commits)
    edges = transitive_reduction(edges)

    def write_text(text: str) -> None:
        if args.output:
            Path(args.output).expanduser().write_text(text + "\n")
        else:
            sys.stdout.write(text + "\n")

    if args.format == "mermaid":
        write_text(render_mermaid(edges))
    elif args.format == "dot":
        write_text(render_dot(edges))
    elif args.format == "csv":
        write_text(render_csv(edges))
    else:  # png
        png_bytes = render_png(edges)

        # Determine output path
        if args.output:
            out_path = Path(args.output).expanduser()
        else:
            suffix = ""
            i = 0
            while True:
                candidate = Path(f"graph{suffix}.png")
                if not candidate.exists():
                    out_path = candidate
                    break
                i += 1
                suffix = f".{i}"

        out_path.write_bytes(png_bytes)
        sys.stderr.write(f"INFO: created file '{out_path}' ({len(png_bytes)} bytes)\n")


if __name__ == "__main__":
    main()
